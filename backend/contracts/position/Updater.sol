// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity ^0.8.0;

import "@chainlink/contracts/src/v0.8/AutomationCompatible.sol";

abstract contract Updater is AutomationCompatibleInterface {
    uint public immutable interval;
    uint public lastTimeStamp;

    event UpkeepPerformed(uint indexed tokenId);

    constructor(uint updateInterval) {
        interval = updateInterval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(
        bytes calldata /* checkData */
    ) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded =
            ((block.timestamp - lastTimeStamp) > interval) &&
            (getTickOutOfRangePositions().length > 0);
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        uint[] memory tokens = getTickOutOfRangePositions();
        if (
            ((block.timestamp - lastTimeStamp) > interval) &&
            (getTickOutOfRangePositions().length > 0)
        ) {
            lastTimeStamp = block.timestamp;
            emit UpkeepPerformed(tokens[0]);
        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }

    function getTickOutOfRangePositions() internal view virtual returns (uint[] memory);

    function updatePosition(uint tokenId) internal virtual;
}
